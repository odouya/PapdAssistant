<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="imageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="imageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj0yLjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAACQ
        EAAAAk1TRnQBSQFMAwEBAAEYAQABGAEAASABAAEgAQAE/wEZAQAI/wFCAU0BNgcAATYDAAEoAwABgAMA
        ASADAAEBAQABGAYAATD/AP8A/wD/AP8A/wAeAAP/AvsB/AH4AfkB+gH4AfkB+gH4AfkB+gH3AfkB+gH3
        AfkB+gH3AfkB+gH3AfkB+gH3AfkB+gH3AfkB+gH3AfkB+gH3AfkB+gH3AfkB+gH3AfkB+gH3AfkB+gH3
        AfkB+gH3AfkB+gH3AfkB+gH3AfkB+gH3AfkB+gH3AfkB+gH3AfkB+gH3AfkB+gH3AfkB+gH3AfkB+gL7
        AfwD//8ALQAB7gHzAfYBiQHPAeoBdAHIAeoBdQHJAeoBdgHJAeoBbQHHAekBUgG8AeUBPwG1AeQBOwG0
        AeMBPAG0AeQBPAG0AeQBPAG0AeQBPAG0AeQBPAG0AeQBPAG0AeQBPAG0AeQBPAG0AeQBPAG0AeQBPAG0
        AeQBPAG0AeQBPAG0AeQBPAG0AeQBPAG0AeQBPAG0AeQBPAGzAeMBPAGzAeMBWQG8AeQB6QHyAfX/AC0A
        AdcB6QHwAVQBvwHpAVQBvwHpAVABtgHnAU0BsAHlAU4BsQHlAUsBrwHlATQBpwHiARYBmwHdAQwBlwHX
        AQwBlgHXAQwBlwHXAQwBlwHXAQwBlwHXAQwBlwHXAQwBlwHXAQwBlwHXAQwBlwHXAQwBlwHXAQwBlwHX
        AQwBlwHXAQwBlwHXAQwBlwHXAQwBlgHXAQsBngHcAQoBowHgAQoBowHgAcoB5AHv/wAtAAHTAegB8AFM
        AbwB6AFVAcAB6QE3AX8B1wEiAVEBywEjAVMBywEjAVMBywEkAVMBywEfAVEByQEaAUsBtwEbAUcBpAEb
        AUUBnQEbAUYBngEbAUYBngEbAUYBngEbAUYBngEbAUYBngEbAUYBngEbAUYBngEbAUYBngEbAUYBngEb
        AUYBngEbAUYBngEbAUUBnQERAX0BxQEKAaUB4QEKAaMB4AHLAeUB7/8ALQABywHlAe8BGAGoAeIBOAG1
        AeYBLwF0AdQBGwFBAccBHAFDAccBHAFDAccBHAFDAccBHAFDAccBHAFDAccBHAFBAb4BHQE9AakBHQE5
        AZkBHQE3AZEBHQE3AZEBHQE4AZUBHQE4AZUBHQE4AZQBHQE4AZQBHQE4AZQBHQE4AZQBHQE4AZQBHQE4
        AZQBHQE3AZQBEgF3AcEBCgGlAeEBCgGjAeABywHlAe//AC0AAcsB5QHvAQkBowHgAQwBpAHgARkBaAG/
        AR0BPwG2ARwBRAHGARwBRAHIARwBRAHHARwBRAHHARwBRAHHARwBRAHIARwBQwHEAR0BPAGoAR0BOAGH
        AR0BNgF+AR4BNQGIAR0BOQGUAR0BOQGVAR0BOQGVAR0BOQGVAR0BOQGVAR0BOQGVAR0BOQGVAR0BOAGV
        ARIBdwHBAQoBpQHhAQoBowHgAcsB5QHv/wAtAAHLAeUB7wEKAaMB4AEKAaQB4AEVAWQBswEdATgBlgEd
        AT0BpwEcAUIBvAEcAUQBxwEcAUQByAEcAUQBxwEcAUABuwEdAT0BpgEZAVIBqAEQAX8BxQERAXwBugEZ
        AUsBjQEeATQBfwEdATYBjAEdATkBlQEdATkBlQEdATkBlQEdATkBlQEdATkBlQEdATgBlQESAXcBwQEK
        AaUB4QEKAaMB4AHLAeUB7/8ALQABywHlAe8BCgGjAeABCgGkAeEBFQFlAbQBHQE3AZQBHQE5AZQBHQE6
        AZkBHQE+Aa0BHAFBAboBHAE9AasBGgFKAaQBEwFzAb4BCwGbAdoBCgGmAeMBCgGmAeMBDAGaAdcBEwFu
        Aa0BGwFCAYUBHgE1AYIBHQE4AZEBHQE5AZUBHQE5AZUBHQE5AZUBHQE4AZUBEgF3AcEBCgGlAeEBCgGj
        AeABywHlAe//AC0AAcsB5QHvAQoBowHgAQoBpAHhARUBYwGzAR4BNQGSAR0BNwGUAR0BNwGTAR0BNwGU
        AR4BMwGHASQBWwGjARMBlwHXAQkBpAHhAQoBoQHdAQ4BiQG6AQ4BiQG6AQoBogHeAQoBpAHhAQ0BkgHP
        ARgBTgGTAR0BMwGHARwBNwGUAR0BNwGUAR0BNwGUAR0BNgGTARIBdwHBAQoBpQHhAQoBowHgAcsB5QHv
        /wAtAAHLAeUB7wEKAaMB4AEKAaMB4AERAX4BxgEVAWMBswEVAWUBtAEVAWUBtAEVAWUBtAEWAVoBnwEy
        AYQBtQFCAboB6AEhAawB4wENAaIB3gETAWoBjwETAWwBkQEKAaEB3gEKAaMB4AEKAaQB4QEfAXoBuQEy
        AWkBsgErAW0BuAEYAWYBtAEUAWQBtAEVAWQBtAEPAYkBzgEKAaQB4QEKAaMB4AHLAeUB7/8ALQABywHl
        Ae8BCgGkAeEBCgGkAeEBCgGkAeEBCgGkAeIBCgGkAeIBCgGkAeIBCgGlAeIBCwGXAdABJAGQAbwBUwG+
        AecBUQG+AekBOAGvAd8BHAFvAZIBEgFwAZcBCgGeAdoBCgGjAeABCwGiAd8BNAGWAb4BUQGyAdgBUgHA
        AesBOwG3AecBGwGrAeMBCgGkAeEBCQGkAeEBCgGkAeEBCgGkAeEBywHlAe//AC0AAcsB4gHrAQ0BkgHI
        AQ0BkgHIAQ0BkgHIAQ0BkgHIAQ0BkgHIAQ0BkgHIAQ0BkgHIAQ4BiQG7ASEBggGqAVEBuwHkAVUBwAHr
        AUcBlQG1ATMBXwFzASYBWwFyARQBiQG4AQkBpAHiAQ0BoQHcATkBjgGxAVMBqAHLAVcBtAHZAVcBswHY
        AVEBsQHYATUBpgHUARgBmAHMAQwBkgHIAQ0BkgHHAcsB4gHr/wAtAAHMAeEB6QEOAYsBvgEOAYsBvgEO
        AYwBvgEOAYwBvwEOAYwBvwEOAYwBvwEOAYwBvwEOAYcBuAEbAXoBoQFLAbQB3gFVAcEB6wFGAZQBtAE1
        AV8BcgE1AV8BcgE+AZgBvQEpAbEB5gEYAaEB2AFCAY4BrQFWAaoBywFYAbAB0gFXAa8B0gFYAa8B0gFY
        Aa8B0gFNAakBzgEvAZkBxAEVAY4BvwHLAeEB6f8ALQABywHlAe8BCgGjAeABCgGjAeABCwGcAdsBDAGW
        AdcBDAGXAdcBDAGXAdcBDAGXAdgBDAGVAdUBFAF+AbABRQGtAdcBVQHAAeoBUgG5AeIBRgGUAbQBRgGV
        AbUBUwG5AeIBVAHAAeoBQQGrAdcBOgGNAbUBTQGuAeEBTQGxAeYBTQGxAeUBTQGxAeUBTQGwAeUBUgG6
        AegBVAHAAekBQwG5AecB0QHnAfD/AC0AAcsB5QHvAQoBowHgAQoBpAHgARQBbAG5ARsBRAGdARsBRgGe
        ARsBRgGeARsBRgGeARsBRQGdAR0BQAGGAUQBlwHHAVUBwgHsAVUBwAHqAVUBwQHrAVUBwQHrAVUBwAHq
        AVUBwgHsAUQBlwHHASABQQGGASMBSwGqASMBUAHAASMBUwHLASMBUwHLASIBUgHLAUABkgHdAVUBwQHq
        AVUBvwHpAdcB6gHx/wAtAAHLAeUB7wEKAaMB4AEKAaQB4QEVAWQBswEdATYBkwEdATgBlAEdATgBlAEd
        ATgBlAEdATgBlQEeATMBgAE7AXwBsAFOAbAB3QFOAa4B2wFOAa4B2wFOAa4B2wFOAa4B2wFOAbAB3AE4
        AXYBqwEdATMBgQEdATgBlAEcATkBmQEcAT0BrQEcAUIBwAEbAUIBxwE9AYwB2wFVAcEB6gFUAb8B6QHX
        AeoB8f8ALQABywHlAe8BCgGjAeABCgGkAeABFQFlAbQBHQE3AZQBHQE5AZUBHQE5AZUBHQE5AZUBHQE5
        AZUBHQE1AYUBIgE8AX8BJAFDAYUBJAFDAYUBJAFDAYUBJAFDAYUBJAFDAYUBJAFDAYUBIQE6AX0BHQE2
        AYgBHQE5AZYBHQE5AZUBHQE5AZUBHQE7AZ0BHAE/AbIBPQGMAdgBVgHCAeoBVAG/AekB1wHqAfH/AC0A
        AcsB5QHvAQoBowHgAQoBpAHhARUBZQGzAR0BNwGTAR0BOQGUAR0BOQGUAR0BOQGUAR0BOQGUAR0BOAGS
        AR0BNwGPAR0BNwGPAR0BNwGPAR0BNwGPAR0BNwGPAR0BNwGPAR0BNwGPAR0BNwGQAR0BOAGSAR0BOQGU
        AR0BOQGUAR0BOQGUAR0BOQGUAR0BOAGUASMBfgHFAT8BuQHoAVMBvgHpAdcB6gHx/wAtAAHVAekB8QEM
        AaMB4AEKAaQB4AEUAWsBwgEdATwBqQEdAT4BqgEdAT4BqgEdAT4BqgEdAT4BqgEdAT4BqgEdAT4BqgEd
        AT4BqgEdAT4BqgEdAT4BqgEdAT4BqgEdAT4BqgEdAT4BqgEdAT4BqgEdAT4BqgEdAT4BqgEdAT4BqgEd
        AT4BqgEdAT4BqgEdAT0BqQERAXkByQEOAaYB4QEqAa4B5AHcAewB8v8ALQAB8gH2AfgBNAGxAeIBCgGk
        AeABEQF+AdYBHAFEAccBHAFEAccBHAFEAccBHAFEAccBHAFEAccBHAFEAccBHAFEAccBHAFEAccBHAFE
        AccBHAFEAccBHAFEAccBHAFEAccBHAFEAccBHAFEAccBHAFEAccBHAFEAccBHAFEAccBHAFEAccBHAFE
        AccBHAFEAccBEQGBAdcBCQGkAeABMwGxAeIB8gH2Afj/AC0AA/8BqgHYAesBCgGkAeABDQGVAdwBGgFR
        AcoBHAFDAccBHAFEAccBHAFEAccBHAFEAccBHAFEAccBHAFEAccBHAFEAccBHAFEAccBHAFEAccBHAFE
        AccBHAFEAccBHAFEAccBHAFEAccBHAFEAccBHAFEAccBHAFEAccBHAFEAccBHAFDAccBGgFRAcoBDQGV
        AdwBCgGkAeABrwHaAesD//8AMAAC+wH8AakB2AHrAUsBtwHjAUEBlAHbAUgBbwHQAUoBaQHPAUoBaQHP
        AUoBaQHPAUoBaQHPAUoBaQHPAUoBaQHPAUoBaQHPAUoBaQHPAUoBaQHPAUoBaQHPAUoBaQHPAUoBaQHP
        AUoBaQHPAUoBaQHPAUoBaQHPAUoBaQHPAUgBcAHQAUEBlwHbAU4BuQHjAaoB2AHrAfsC/P8ANgAD/wH5
        AvsB9wH5AfoB9wH4AfoB9wH4AfoB9wH4AfoB9wH4AfoB9wH4AfoB9wH4AfoB9wH4AfoB9wH4AfoB9wH4
        AfoB9wH4AfoB9wH4AfoB9wH4AfoB9wH4AfoB9wH4AfoB9wH4AfoB9wH4AfoB9wH4AfoB9wH4AfoB9wH5
        AvoC+wP//wD/AP8A/wD/AP8A/wD/ALQAAUIBTQE+BwABPgMAASgDAAGAAwABIAMAAQEBAAEBBgABAhYA
        A/8BAAT/DAAE/wwABP8MAAT/DAABwAIAAQMMAAHAAgABAwwAAcACAAEDDAABwAIAAQMMAAHAAgABAwwA
        AcACAAEDDAABwAIAAQMMAAHAAgABAwwAAcACAAEDDAABwAIAAQMMAAHAAgABAwwAAcACAAEDDAABwAIA
        AQMMAAHAAgABAwwAAcACAAEDDAABwAIAAQMMAAHAAgABAwwAAcACAAEDDAABwAIAAQMMAAHAAgABAwwA
        AcACAAEDDAAB4AIAAQcMAAHwAgABDwwABP8MAAT/DAAE/wwABP8MAAT/DAAL
</value>
  </data>
</root>